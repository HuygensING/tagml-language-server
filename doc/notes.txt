[tag>text<tag]
[tag> text <tag]

expect:
step 1:
- token: [tag>
- expect: anyOpenTag
- match: yes
- derived expectation: group(choice(anyOpenTag, text),closeTag(tag)) // moet de expectation al meteen de hele token sequence vangen?

step 2:
- token: text
- expect: group(choice(anyOpenTag, text),closeTag(tag))
- match: yes, matches with text
- derived expectation: group(choice(anyOpenTag,empty),closeTag(tag))

step 3
- token: <tag]
- expect: group(choice(anyOpenTag,empty),closeTag(tag))
- match: yes, matches with closeTag(tag)
- derived expectation: empty

step 3
- eof (matches empty)




[tag>[color>Green<color] [food>Eggs<food] and [food>Ham<food]<tag]

step 1:
- token: [tag>
- expect: anyOpenTag
- match: yes
- derived expectation: group(choice(anyOpenTag, text),closeTag(tag))

step 2:
- token: [color>
- expect: group(choice(anyOpenTag, text),closeTag(tag))
- match: yes, matches anyOpenTag
- derived expectation: group(choice(anyOpenTag, text,empty),closeTag(color),choice(anyOpenTag, text,empty),closeTag(tag))

step 3:
- token: Green
- expect: group(choice(anyOpenTag, text),closeTag(color),choice(anyOpenTag, text),closeTag(tag))


-----
patterncombinators met 2 patterns: kunnen ze uitgebreid worden tot n patterns?
choice(p1,p2) -> choice(p1..pn)
dit zou de nesting van patterns minder maken: choice(p1,p2,p3) wordt nu choice(choice(p1,p2),p3) of choice(p1,choice(p2,p3))
in haskell is dit niet te doen, omdat je voor elk aantal parameters een regel moet schrijven
in Jing-Trang zijn After, Choice, Group en Interleave BinaryPatterns -> dus geen aggregatie?


-----
texttokens met alleen whitespace apart behandelen?

http://conferences.idealliance.org/extreme/html/2006/SperbergMcQueen01/EML2006SperbergMcQueen01.html
https://www.princexml.com/howcome/2007/xtech/papers/output/0077-30.pdf

# on the growth of the derived patterns (and how to limit that):
https://maniagnosis.crsr.net/2012/05/parsing-with-derivatives-compaction.html

https://crypto.stanford.edu/~blynn/haskell/pwd.html
https://arxiv.org/abs/1604.04695
http://david.darais.com/assets/papers/parsing-with-derivatives/pwd.pdf
http://matt.might.net/articles/parsing-with-derivatives/
https://github.com/tmmcguire/Java-Parser-Derivatives
------------------------------------------------------------------------------------------------------------------------

# LSP
- completion:
  - on '<' : list open tags at this point that can be closed: 1 per layer, add layerid when required (because tag 'x' is open in multiple layers; start typing -> limit list of close tags, or '<|_|_|>'
  - on '[' : when at start: [!ns _], [!schema _], [! _ !] (schema only once, others can be repeated)
                  otherwise: [! _ !]
                  when schema defined: for every open layer, show the next children as open tags
  - on '|': when inside open/close tag: show available layer_ids  + '+'; when schema is defined: show '+'"+ layername for layers that haven't been opened yet, layername for others
  - on ' ' after tagname, when schema defined: show annotation names as defined in schema

# lsp validate can return:
-  DiagnosticSeverity.Error : tagml errors
-  DiagnosticSeverity.Warn
-  DiagnosticSeverity.Hint
-  DiagnosticSeverity.Information

- When parsing the tagml text, we need a list of tokens/objects (open/tag subdivided into parts), these tokens should have a Range associated with them (startPosition, endPosition). parsed parsers know location in the stream, need to extract line/character from that. extend map fun from Parser+Monad ?

-------------------
Instructies:

# Geef de [TAGML-Language-Server jar|https://cdn.huygens.knaw.nl/alexandria/develop/tagml-language-server-1.0-SNAPSHOT.jar] (TLS) een plekje op je machine
# Installeer de LSP plugin in Sublime Text 3:
  {code}Preferences / Package Control / Install Package / LSP{code}
# Activeer de TAGML-Language-Server in de LSP plugin:
  {code}Preferences / Package Settings / LSP / Settings {code}
  In het rechtervenster ({{LSP.sublime-settings -- User}})
  vul je dit in:
{code}
{
  "clients": {
    "vscode-css": {
      "enabled": true
    },
    "tagml-ls": {
      "command": [ "java", "-jar", "C:/tools/tagml-language-server-1.0-SNAPSHOT.jar"],
      "enabled": true,
      "env": {},
      "initializationOptions": {},
      "languageId": "tagml",
      "scopes": [ "text.tagml"],
      "settings": {},
      "syntaxes": [ "Packages/TAGML/TAGML.sublime-syntax" ]
    }
  },
  "auto_show_diagnostics_panel": "always",
  "auto_show_diagnostics_panel_level": 4,
  "completion_hint_type": "auto",
  "log_debug": true,
  "log_payloads": true,
  "log_server": true,
  "log_stderr": true,
  "only_show_lsp_completions": true,
  "show_code_actions_bulb": true,
  "show_diagnostics_count_in_view_status": true,
  "show_references_in_quick_panel": true,
  "diagnostics_highlight_style": "block"
}
{code}
Waarbij je {{C:/tools/}} moet vervangen door het pad naar waar je zelf de {{tagml-language-server-1.0-SNAPSHOT.jar}} hebt neergezet. De laatste string acher {{"command"}} moet dus het absolute path naar de jar file zijn.
# Sluit het LSP settings venster.
# Open een TAGML bestand, en edit deze.

Bij elke wijziging die je doet in de TAGML wordt de hele tekst naar de TLS gestuurd en gevalideerd. Als de TAGML niet valide is, verschijnen de foutmeldingen in een apart gedeelte onderin Sublime, en het deel van de TAGML dat de fout bevat wordt rood omrand. De individuele foutmeldingen kun je ook zien door te hoveren boven zo'n rood omrand deel.

Als je helemaal geen foutmeldingen ziet, waar je dat wel verwacht, dan kun je de log tonen door in het Command Palette ({code}Tools / Command Palette{code}) de optie {code}LSP: Toggle Log Panel{code} te selecteren.
Als je er een fout in je LSP Settings was die je verbeterd hebt, en je ziet nog geen resultaat, probeer dan {code}LSP: Restart Servers{code} in de Command Palette.
---------------------------